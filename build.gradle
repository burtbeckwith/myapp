plugins {
    id 'com.diffplug.eclipse.apt' version '3.22.0'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id 'application'
    id 'com.google.cloud.tools.jib' version '2.4.0'
}

version '0.1'
group 'com.mycompany.myapp'

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor('io.micronaut:micronaut-graal')
    annotationProcessor('io.micronaut:micronaut-inject-java')
    annotationProcessor('io.micronaut:micronaut-validation')
    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    compileOnly('org.graalvm.nativeimage:svm')
    compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation('io.micronaut:micronaut-http-client')
    implementation('io.micronaut:micronaut-http-server-netty')
    implementation('io.micronaut:micronaut-inject')
    implementation('io.micronaut:micronaut-runtime')
    implementation('io.micronaut:micronaut-validation')
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    runtimeOnly('ch.qos.logback:logback-classic')
    testAnnotationProcessor('io.micronaut:micronaut-inject-java')
    testAnnotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation('io.micronaut.test:micronaut-test-junit5')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
}

test.classpath += configurations.developmentOnly

mainClassName = 'com.mycompany.myapp.Application'

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
    targetCompatibility = JavaVersion.toVersion('1.8')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll([
       '-parameters',
       // enables incremental compilation
       '-Amicronaut.processing.incremental=true',
       '-Amicronaut.processing.annotations=com.mycompany.myapp.*',
       "-Amicronaut.processing.group=$project.group",
       "-Amicronaut.processing.module=$project.name",
    ])
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
           'micronaut.io.watch.restart':'true',
           'micronaut.io.watch.enabled':'true',
           'micronaut.io.watch.paths':'src/main'
        )
    }
}

task buildGraal {
    dependsOn 'build', 'nativeImage'
}

task nativeImage(type: Exec) {
    workingDir buildDir
    commandLine 'native-image',
       '--no-server',
       '-jar', 'libs/' + project.name + '-' + project.version + '-all.jar'
}

jib {
    from {
        image	= 'arm64v8/openjdk:8-slim'
    }
    container {
        ports = ['7777']
        format = 'OCI'
    }
}
